rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    function isAdmin() {
      return isAuthenticated() &&
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Admin';
    }

    function hasValidRole() {
      return isAuthenticated() && 
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role != null;
    }

    // Users collection
    match /users/{userId} {
      allow create: if isAuthenticated() && request.auth.uid == userId;
      allow read: if isAuthenticated();
      allow update: if isOwner(userId) || isAdmin();
      allow delete: if isAdmin();
      
      // Allow users to read their own profile data
      match /profile/{profileId} {
        allow read, write: if isOwner(userId);
      }
    }

    // Tasks collection with enhanced security
    match /tasks/{taskId} {
      allow create: if isAuthenticated() && hasValidRole();
      allow read: if isAuthenticated();
      allow update: if isAuthenticated() && (
        resource.data.assignedTo == request.auth.uid ||
        resource.data.createdBy == request.auth.uid ||
        isAdmin()
      );
      allow delete: if isAuthenticated() && (
        resource.data.createdBy == request.auth.uid ||
        isAdmin()
      );
    }

    // User settings with improved security
    match /user_settings/{userId} {
      allow read, write: if isOwner(userId) || isAdmin();
    }

    // Notifications subcollection
    match /users/{userId}/notifications/{notificationId} {
      allow read, write: if isOwner(userId) || isAdmin();
    }

    // Allow access to common user subcollections (assignedTasks, etc.) by the
    // owning user or an admin. Many client queries access subcollections
    // under /users/{uid} and without explicit rules they hit the default
    // deny rule and produce PERMISSION_DENIED on the client.
    match /users/{userId}/{subcollection}/{docId} {
      allow read: if isOwner(userId) || isAdmin();
      allow write: if isOwner(userId) || isAdmin();
    }

    // Admin collections with strict access control
    match /admins/{adminId} {
      allow read, write: if isAdmin();
    }

    match /dashboard_metrics/{metricId} {
      allow read: if isAuthenticated() && (hasValidRole() || isAdmin());
      allow write: if isAdmin();
    }

    // Conversations collection
    match /conversations/{conversationId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated();
    }

    // News collection with public read
    match /news/{newsId} {
      allow read: if true;
      allow write: if isAdmin();
    }

    // Health check for monitoring
    match /_health_check/{checkId} {
      allow read: if true;
      allow write: if isAdmin();
    }

    // Default deny all other collections
    match /{document=**} {
      allow read, write: if false;
    }
  }
}